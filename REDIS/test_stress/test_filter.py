import matplotlib.pyplot as plot
import multiprocessing
import numpy as np
import random
import redis
import time

INSULTS = ["CAVERO", "UCRANIANO", "RUMANO", "VENEZOLANO", "REUSENC", "MOLARENC"]
PETICIONS = [1000,2000,3000,4000,5000, 10000, 20000, 25000, 30000, 40000, 50000, 100000]

client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)

def spam(x,barrier):
    barrier.wait()
    for _ in range(x):
        client.rpush("work_queue",f'{random.choice(INSULTS)}')

def executar_test(x):
    processos = []
    start = time.time()
    
    barrier = multiprocessing.Barrier(4)
    client.delete("listCensored")
    client.delete("counter")

    for _ in range(4):
        p = multiprocessing.Process(target=spam, args=(x, barrier))
        processos.append(p)
        p.start()

    for p in processos:
        p.join()

    con = True
    value = x*4
    while con:
        if (int(client.get("counter")) == value):
            con = False

    end = time.time()
    return (end - start)

def inicialitzar_services():
    for insult in INSULTS:
        client.sadd("setInsults", insult)

def main():
    inicialitzar_services()
    temps = {}

    for service in range(1,4):
        temps[service] = []
        for pet in PETICIONS:
            temps[service].append(executar_test(pet))
        if (service < 3):
            input(f"Click enter when the {service+1} worker is enabled" )
    
    print(temps)

    for i in range(1,4):
        plot.plot(PETICIONS, temps[i], label=f"{i} Nodes")

    plot.xlabel("Peticions")
    plot.ylabel("Temps (segons)")
    plot.title("Test Stress Filter")
    plot.legend()
    plot.grid(True)
    plot.tight_layout()
    plot.show()

if __name__ == "__main__":
    main()

# [3.0933995246887207, 5.8338401317596436, 9.26704454421997, 12.187772512435913, 15.463058233261108, 31.616037845611572, 61.15545916557312, 77.2257080078125, 94.10784101486206, 123.07536840438843, 156.4419448375702, 302.82459783554077]
# [2.212317943572998, 4.004438877105713, 6.138041257858276, 8.124750852584839, 10.267655611038208, 20.479697227478027, 41.64139223098755, 50.49235987663269, 61.054208517074585, 81.69934916496277, 102.30117750167847, 202.0143439769745]
# [1.6043822765350342, 3.2062199115753174, 4.763687372207642, 6.195982217788696, 7.877846717834473, 16.20200276374817, 31.57068967819214, 39.85153341293335, 47.936761140823364, 64.18114423751831, 79.04687762260437, 168.38964939117432]
# [1000, 2000, 3000, 4000, 5000, 10000, 20000, 25000, 30000, 40000, 50000, 100000]

# [4.069791793823242, 7.934994220733643, 11.957417488098145, 17.582671880722046, 21.692752599716187, 42.998619079589844, 85.0755364894867, 106.29883360862732, 128.3746109008789, 171.30626249313354, 216.95435976982117, 431.3401520252228]
# [2.7870688438415527, 5.5733442306518555, 8.16147518157959, 11.132194757461548, 13.909170389175415, 28.133323669433594, 56.75052809715271, 70.7783796787262, 85.25767588615417, 113.79060745239258, 145.10056972503662, 282.8157572746277]
# [2.176778793334961, 4.3610756397247314, 6.348760604858398, 8.668060779571533, 11.022999286651611, 21.796825170516968, 43.90621256828308, 54.24502754211426, 64.95735096931458, 86.31551432609558, 107.82681369781494, 216.38954520225525]
# [1000, 2000, 3000, 4000, 5000, 10000, 20000, 25000, 30000, 40000, 50000, 100000]

# [8.446367263793945, 16.469732999801636, 23.347920656204224, 30.701164484024048, 38.87678670883179, 76.18017983436584, 152.43328642845154, 194.02609300613403, 195.69646835327148, 254.53179240226746, 319.15108013153076, 662.8267722129822]
# [3.7500386238098145, 7.588699817657471, 11.90024709701538, 16.276326894760132, 21.72656559944153, 45.531105279922485, 90.19210600852966, 108.14928030967712, 122.74256825447083, 161.22186398506165, 202.86841869354248, 406.6560170650482]
# [3.0382368564605713, 6.343830823898315, 9.378411531448364, 12.6828134059906, 15.674741268157959, 31.701691389083862, 62.90456581115723, 80.52684211730957, 96.38056635856628, 134.59587860107422, 165.58457589149475, 318.0362796783447]
# [1000, 2000, 3000, 4000, 5000, 10000, 20000, 25000, 30000, 40000, 50000, 100000]